@function em($target, $context: $base-font-size) {
    @if $target == 0 {
        @return 0
    }
    @return $target / $context + 0em;
}

@function rem($target, $context: $base-font-size) {
    @if $target == 0 {
        @return 0
    }
    @return $target / $context + 0rem;
}

@function ratio($target, $context: $base-font-size) {
	@if $target == 0 {
        @return 0
    }
    @return $target / $context;
}

@function text-breakpoints-for($text-size) {
  	@return map-get($text-sizing, $text-size);
}

@function text-properties-for($text-size, $breakpoint-name) {
  	$text-breakpoints-map: text-breakpoints-for($text-size);
  	@return map-get($text-breakpoints-map, $breakpoint-name);
}

@mixin text-size($text-size, $breakpoint-name: "mobile") {
  	$text-size-properties: text-properties-for($text-size, $breakpoint-name);
  	$font-size: map-get($text-size-properties, "font-size");

  	font-size: rem($font-size);
  	line-height: ratio(map-get($text-size-properties, "line-height"), $font-size);
}

@mixin responsive-text-size($text-size, $default-breakpoint: "mobile") {
  	@include text-size($text-size, $default-breakpoint);

  	$text-breakpoints-map: text-breakpoints-for($text-size);
  	$text-breakpoints-keys: map-keys($text-breakpoints-map);

  	@each $breakpoint-name in $text-breakpoints-keys {
    	@if $breakpoint-name != $default-breakpoint and breakpoint($breakpoint-name) != null {
      		@include respond-to($breakpoint-name) {
        		@include text-size($text-size, $breakpoint-name);
      		}
    	}
  	}
}